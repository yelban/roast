import React, { useEffect, useState, TouchEvent } from 'react'
import { Card, CardHeader, CardTitle } from '@/components/ui/card'
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog"
import { Language, MenuData, MenuItem } from '@/types/menu'
import getConfig from 'next/config'
import { useLanguageStore, languageOrder } from '@/store/languageStore'
import { getFontClass, getTitleFontClass } from '@/config/fonts'
import { Button } from '@/components/ui/button'
import { Progress } from '@/components/ui/progress'
import { Volume2, Minus, Plus, ShoppingCart } from 'lucide-react'
import { FontWrapper } from '@/components/FontWrapper'
import { generateHash } from '@/lib/utils'
import { recordCacheUsage } from '@/lib/cacheMetrics'
import { StreamingAudioPlayer } from '@/lib/audioStreaming'
import { useCartStore } from '@/store/cartStore'
import { t } from '@/config/translations'
import TableSelector from '@/components/TableSelector'
import TableSelectorDialog from '@/components/TableSelectorDialog'

// Êó•ÊñáÊï∏Â≠óÊò†Â∞Ñ
const japaneseNumbers: { [key: number]: string } = {
  1: '‰∏Ä„Å§',
  2: '‰∫å„Å§', 
  3: '‰∏â„Å§',
  4: 'Âõõ„Å§',
  5: '‰∫î„Å§',
  6: 'ÂÖ≠„Å§',
  7: '‰∏É„Å§',
  8: 'ÂÖ´„Å§',
  9: '‰πù„Å§'
}

// ÂàÜÈ°ûÈ°èËâ≤Êò†Â∞Ñ
const categoryColors: { [key: string]: { 
  bg: string; 
  border: string; 
  text: string; 
  hover: string;
  light: string;
} } = {
  'ÁÑºËÇâ': {
    bg: 'bg-red-100',
    border: 'border-red-600',
    text: 'text-red-600',
    hover: 'hover:border-red-700',
    light: 'hover:bg-red-50'
  },
  '„Éõ„É´„É¢„É≥': {
    bg: 'bg-orange-100',
    border: 'border-orange-600',
    text: 'text-orange-600',
    hover: 'hover:border-orange-700',
    light: 'hover:bg-orange-50'
  },
  '„Åù„ÅÆ‰ªñ': {
    bg: 'bg-blue-100',
    border: 'border-blue-600',
    text: 'text-blue-600',
    hover: 'hover:border-blue-700',
    light: 'hover:bg-blue-50'
  },
  'Â≠£ÁØÄÈôêÂÆö„Çπ„Éº„Éó': {
    bg: 'bg-purple-100',
    border: 'border-purple-600',
    text: 'text-purple-600',
    hover: 'hover:border-purple-700',
    light: 'hover:bg-purple-50'
  },
  '„ÅîÈ£Ø': {
    bg: 'bg-yellow-100',
    border: 'border-yellow-600',
    text: 'text-yellow-700',
    hover: 'hover:border-yellow-700',
    light: 'hover:bg-yellow-50'
  },
  '„Çπ„Éº„Éó': {
    bg: 'bg-teal-100',
    border: 'border-teal-600',
    text: 'text-teal-600',
    hover: 'hover:border-teal-700',
    light: 'hover:bg-teal-50'
  },
  'Êº¨Áâ©ÔºÜ„Çµ„É©„ÉÄ': {
    bg: 'bg-green-100',
    border: 'border-green-600',
    text: 'text-green-600',
    hover: 'hover:border-green-700',
    light: 'hover:bg-green-50'
  },
  'ÁÖÆÁâ©ÊñôÁêÜ': {
    bg: 'bg-amber-100',
    border: 'border-amber-600',
    text: 'text-amber-700',
    hover: 'hover:border-amber-700',
    light: 'hover:bg-amber-50'
  },
  '„Éá„Ç∂„Éº„Éà': {
    bg: 'bg-pink-100',
    border: 'border-pink-600',
    text: 'text-pink-600',
    hover: 'hover:border-pink-700',
    light: 'hover:bg-pink-50'
  },
  '„ÅäÂúüÁî£': {
    bg: 'bg-gray-100',
    border: 'border-gray-600',
    text: 'text-gray-600',
    hover: 'hover:border-gray-700',
    light: 'hover:bg-gray-50'
  }
}

// Áç≤ÂèñÂàÜÈ°ûÈ°èËâ≤ÁöÑÂáΩÊï∏
const getCategoryColor = (categoryId: string) => {
  return categoryColors[categoryId] || categoryColors['„Åù„ÅÆ‰ªñ']
}

interface SelectedItem extends MenuItem {
  categoryName: {
    [key in Language]: string
  }
}

interface MenuProps {
  mode?: 'customer' | 'pos'
}

export default function Menu({ mode = 'customer' }: MenuProps) {
  const { language, setLanguage, slideDirection, setSlideDirection, nextLanguage, setNextLanguage } = useLanguageStore()
  const { addItem, getItemCount, toggleCart, items, tableNumber } = useCartStore()
  const [menuData, setMenuData] = useState<MenuData | null>(null)
  const [isMenuLoading, setIsMenuLoading] = useState(true)
  const [isPlaying, setIsPlaying] = useState(false)
  const [selectedItem, setSelectedItem] = useState<SelectedItem | null>(null)
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const [touchStart, setTouchStart] = useState<number | null>(null)
  const [isTTSLoading, setIsTTSLoading] = useState(false)
  const [audioPlayer, setAudioPlayer] = useState<StreamingAudioPlayer | null>(null)
  const [audioProgress, setAudioProgress] = useState<{ loaded: number; total: number } | null>(null)
  const [quantity, setQuantity] = useState(1)
  const [isQuantityTTSLoading, setIsQuantityTTSLoading] = useState(false)
  const [preloadedQuantityAudios, setPreloadedQuantityAudios] = useState<{ [key: number]: string }>({})
  const [isPreloading, setIsPreloading] = useState(false)
  const [selectedCategory, setSelectedCategory] = useState<string>('')
  const [showTableSelector, setShowTableSelector] = useState(mode === 'pos' && !tableNumber)
  const [showTableSelectorDialog, setShowTableSelectorDialog] = useState(false)

  // Èü≥ÊïàÂäüËÉΩ
  const playButtonSound = (type: 'plus' | 'minus' | 'boundary') => {
    try {
      const audioContext = new (window.AudioContext || (window as unknown as { webkitAudioContext: typeof AudioContext }).webkitAudioContext)()
      const oscillator = audioContext.createOscillator()
      const gainNode = audioContext.createGain()
      
      oscillator.connect(gainNode)
      gainNode.connect(audioContext.destination)
      
      // Ë®≠ÂÆöÈü≥ÊïàÂèÉÊï∏
      switch (type) {
        case 'plus':
          // + ÊåâÈàïÔºöËºÉÈ´òÈ†ªÁéáÁöÑÁü≠Èü≥
          oscillator.frequency.setValueAtTime(800, audioContext.currentTime)
          oscillator.frequency.exponentialRampToValueAtTime(900, audioContext.currentTime + 0.1)
          break
        case 'minus':
          // - ÊåâÈàïÔºöËºÉ‰ΩéÈ†ªÁéáÁöÑÁü≠Èü≥
          oscillator.frequency.setValueAtTime(400, audioContext.currentTime)
          oscillator.frequency.exponentialRampToValueAtTime(350, audioContext.currentTime + 0.1)
          break
        case 'boundary':
          // ÈÇäÁïåÈü≥ÊïàÔºöÈõôÈü≥Ë™øÊèêÁ§∫
          oscillator.frequency.setValueAtTime(600, audioContext.currentTime)
          oscillator.frequency.setValueAtTime(400, audioContext.currentTime + 0.1)
          oscillator.frequency.setValueAtTime(600, audioContext.currentTime + 0.2)
          break
      }
      
      // Èü≥ÈáèÊéßÂà∂
      gainNode.gain.setValueAtTime(0, audioContext.currentTime)
      gainNode.gain.linearRampToValueAtTime(0.1, audioContext.currentTime + 0.01)
      gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + (type === 'boundary' ? 0.3 : 0.15))
      
      oscillator.type = 'sine'
      oscillator.start(audioContext.currentTime)
      oscillator.stop(audioContext.currentTime + (type === 'boundary' ? 0.3 : 0.15))
      
      // Ê∏ÖÁêÜË≥áÊ∫ê
      oscillator.onended = () => {
        audioContext.close()
      }
    } catch (error) {
      // Â¶ÇÊûúÈü≥ÊïàÊí≠ÊîæÂ§±ÊïóÔºåÈùúÈªòËôïÁêÜ
      console.warn('Èü≥ÊïàÊí≠ÊîæÂ§±Êïó:', error)
    }
  }

  const loadMenuData = async () => {
    try {
      setIsMenuLoading(true)
      const { publicRuntimeConfig } = getConfig()
      const basePath = publicRuntimeConfig?.root || ''
      
      const protocol = window.location.protocol
      const host = window.location.host
      // Âæû package.json Áç≤ÂèñÁâàÊú¨Ëôü‰æÜÁ¢∫‰øùÂø´ÂèñÊõ¥Êñ∞
      const version = process.env.npm_package_version || '0.4.0'
      const apiPath = basePath ? `${protocol}//${host}${basePath}/api/menu?v=${version}` : `${protocol}//${host}/api/menu?v=${version}`
      const response = await fetch(apiPath)
      const data = await response.json()
      setMenuData(data)
    } catch (error) {
      // console.error('ËºâÂÖ•ËèúÂñÆÂ§±Êïó:', error)
    } finally {
      setIsMenuLoading(false)
    }
  }

  // È†ê‰∏ãËºâÊï∏ÈáèÈü≥Ê™î
  const preloadQuantityAudios = async () => {
    if (isPreloading) return
    
    setIsPreloading(true)
    console.log('üéµ ÈñãÂßãÈ†ê‰∏ãËºâÊï∏ÈáèÈü≥Ê™î...')
    
    const preloadedUrls: { [key: number]: string } = {}
    
    try {
      const { publicRuntimeConfig } = getConfig()
      const basePath = publicRuntimeConfig?.root || ''
      const protocol = window.location.protocol
      const host = window.location.host
      
      // ‰∏¶Ë°å‰∏ãËºâ1-9ÁöÑÊï∏ÈáèÈü≥Ê™î
      const downloadPromises = Object.entries(japaneseNumbers).map(async ([num, text]) => {
        try {
          const encodedText = encodeURIComponent(text)
          const apiUrl = `${protocol}//${host}${basePath}/api/tts/${encodedText}`
          
          const response = await fetch(apiUrl, {
            headers: { 'Accept': 'audio/mpeg' },
            mode: 'cors' as RequestMode
          })
          
          if (response.ok) {
            const blob = await response.blob()
            const blobUrl = URL.createObjectURL(blob)
            preloadedUrls[parseInt(num)] = blobUrl
            console.log(`üéµ È†ê‰∏ãËºâÂÆåÊàê: ${text} (${num})`)
          }
        } catch (error) {
          console.warn(`üéµ È†ê‰∏ãËºâÂ§±Êïó: ${text} (${num})`, error)
        }
      })
      
      await Promise.all(downloadPromises)
      setPreloadedQuantityAudios(preloadedUrls)
      console.log('üéµ ÊâÄÊúâÊï∏ÈáèÈü≥Ê™îÈ†ê‰∏ãËºâÂÆåÊàêÔºÅ', preloadedUrls)
      
    } catch (error) {
      console.error('üéµ È†ê‰∏ãËºâÈÅéÁ®ãÁôºÁîüÈåØË™§:', error)
    } finally {
      setIsPreloading(false)
    }
  }

  useEffect(() => {
    loadMenuData()
    // Âª∂ÈÅ≤‰∏ÄÈªûÈñãÂßãÈ†ê‰∏ãËºâÔºåÈÅøÂÖçÈòªÂ°û‰∏ªË¶ÅÂÖßÂÆπËºâÂÖ•
    setTimeout(() => {
      preloadQuantityAudios()
    }, 1000)
    
    // Ê∏ÖÁêÜÂáΩÊï∏ÔºöÈáãÊîæÈ†ê‰∏ãËºâÁöÑ blob URLs
    return () => {
      Object.values(preloadedQuantityAudios).forEach(url => {
        if (url) {
          URL.revokeObjectURL(url)
        }
      })
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  // Ë®≠ÁΩÆÈªòË™çÈÅ∏‰∏≠Á¨¨‰∏ÄÂÄãÈ°ûÂà•ÔºàPOSÊ®°ÂºèÁî®Ôºâ
  useEffect(() => {
    if (mode === 'pos' && menuData && Object.keys(menuData).length > 0 && !selectedCategory) {
      const firstCategory = Object.keys(menuData)[0]
      setSelectedCategory(firstCategory)
    }
  }, [mode, menuData, selectedCategory])

  const handleItemClick = (item: MenuItem, categoryName: { [key in Language]: string }) => {
    setSelectedItem({ ...item, categoryName })
    setQuantity(1) // ÈáçÁΩÆÊï∏ÈáèÁÇ∫1
    setIsDialogOpen(true)
  }

  // Áµ±‰∏ÄÁöÑËß∏ÊéßËôïÁêÜÂáΩÊï∏
  const handleTouchEvent = (
    e: TouchEvent,
    startTouch: number | null,
    onSwipeLeft: () => void,
    onSwipeRight?: () => void
  ) => {
    if (!startTouch) return

    const touchEnd = e.changedTouches[0].clientX
    const diff = startTouch - touchEnd

    if (Math.abs(diff) < 125) return

    if (diff > 0) {
      onSwipeLeft()
    } else if (onSwipeRight) {
      onSwipeRight()
    }
  }

  // ËôïÁêÜ‰∏ªÈ†ÅÈù¢ÊªëÂãï
  const handleMainTouchEnd = (e: TouchEvent) => {
    const currentIndex = languageOrder.indexOf(language)
    const isFirstLanguage = currentIndex === 0
    const isLastLanguage = currentIndex === languageOrder.length - 1

    handleTouchEvent(
      e,
      touchStart,
      () => {
        // ÂêëÂ∑¶ÊªëÂãïÔºà‰∏ã‰∏ÄÂÄãË™ûË®ÄÔºâ
        if (!isLastLanguage) {
          const nextIndex = currentIndex + 1
          handleLanguageChange(nextIndex)
        }
      },
      () => {
        // ÂêëÂè≥ÊªëÂãïÔºà‰∏ä‰∏ÄÂÄãË™ûË®ÄÔºâ
        if (!isFirstLanguage) {
          const nextIndex = currentIndex - 1
          handleLanguageChange(nextIndex)
        }
      }
    )
    setTouchStart(null)
  }

  // ËôïÁêÜÂ∞çË©±Ê°ÜÊªëÂãï
  const handleDialogTouchEnd = (e: TouchEvent) => {
    handleTouchEvent(
      e,
      touchStart,
      () => setIsDialogOpen(false),  // ÂêëÂ∑¶ÊªëÂãïÊôÇÈóúÈñâ
      () => setIsDialogOpen(false)   // ÂêëÂè≥ÊªëÂãïÊôÇ‰πüÈóúÈñâ
    )
    setTouchStart(null)
  }

  const handleLanguageChange = (index: number) => {
    const newLang = languageOrder[index]
    setSlideDirection(index > languageOrder.indexOf(language) ? 'left' : 'right')
    setNextLanguage(newLang)
    
    setTimeout(() => {
      setLanguage(newLang)
      setSlideDirection(null)
      setNextLanguage(null)
    }, 300)
  }

  // Ê™¢Êü•ËèúÂìÅÊòØÂê¶Âú®Ë≥ºÁâ©Ëªä‰∏≠‰∏¶ËøîÂõûÊï∏Èáè
  const getItemInCart = (item: MenuItem) => {
    const cartItem = items.find(cartItem => {
      const itemPrice = typeof item.price === 'object' 
        ? item.price.normal || 0 
        : typeof item.price === 'number' 
        ? item.price 
        : 0
      
      return cartItem.name['ja'] === item.name['ja'] && cartItem.price === itemPrice
    })
    return cartItem ? cartItem.quantity : 0
  }

  const formatPrice = (price: number | { normal?: number; half?: number } | string): React.JSX.Element => {
    if (typeof price === 'number') {
      return (
        <span>
          <span className="text-gray-400 mr-0.5 font-light align-bottom">¬•</span>
          {price.toLocaleString()}
        </span>
      )
    }
    if (typeof price === 'string') {
      return (
        <span>
          <span className="text-gray-400 mr-0.5 font-light align-bottom">¬•</span>
          {price}
        </span>
      )
    }
    if (price.normal) {
      return (
        <span>
          <span className="text-gray-400 mr-0.5 font-light align-bottom">¬•</span>
          {price.normal.toLocaleString()}
          {price.half ? (
            <>
              {' / '}
              <span className="text-gray-400 mr-0.5 font-light align-bottom">¬•</span>
              {price.half.toLocaleString()}
            </>
          ) : ''}
        </span>
      )
    }
    return <span>ÂÉπÊ†ºÊú™ÂÆö</span>
  }

  const playTTS = async (text: string) => {
    const startTime = performance.now()
    
    try {
      // Â¶ÇÊûúÊ≠£Âú®Êí≠ÊîæÔºåÂÖàÂÅúÊ≠¢
      if (isPlaying) {
        setIsPlaying(false)
        if (audioPlayer) {
          audioPlayer.stop()
          setAudioPlayer(null)
        }
        return // Áõ¥Êé•ËøîÂõûÔºå‰∏çÈáçÊñ∞Êí≠ÊîæÂêå‰∏ÄÂÄãÈü≥Ë®ä
      }
      
      setIsTTSLoading(true)
      setAudioProgress(null)
      
      // Ê∏ÖÁêÜ‰πãÂâçÁöÑÊí≠ÊîæÂô®
      if (audioPlayer) {
        audioPlayer.stop()
        setAudioPlayer(null)
      }
      
      const textHash = generateHash(text)
      
      const { publicRuntimeConfig } = getConfig()
      const basePath = publicRuntimeConfig?.root || ''
      const protocol = window.location.protocol
      const host = window.location.host
      const encodedText = encodeURIComponent(text)
      const apiUrl = `${protocol}//${host}${basePath}/api/tts/${encodedText}`

      const playAudio = async (audioResponse: Response) => {
        // Ë®òÈåÑÂø´Âèñ‰ΩøÁî®ÊåáÊ®ô
        const responseTime = performance.now() - startTime
        recordCacheUsage(textHash, text, responseTime)
        
        // console.log('üéµ ÈñãÂßãÊí≠ÊîæÈü≥Ë®ä:', text)
        // console.log('üéµ AudioResponse ÁãÄÊÖã:', audioResponse.status, audioResponse.statusText)
        
        // Á∞°ÂåñÁÇ∫ÂÇ≥Áµ±Êí≠ÊîæÊñπÂºèÔºåÈÅøÂÖçÊµÅÂºèÊí≠ÊîæÁöÑË§áÈõúÊÄß
        // console.log('üéµ ËÆÄÂèñ audioResponse blob...')
        const blob = await audioResponse.blob()
        // console.log('üéµ Èü≥Ë®ä Blob Â§ßÂ∞è:', blob.size, 'bytes, È°ûÂûã:', blob.type)
        
        const blobUrl = URL.createObjectURL(blob)
        const audio = new Audio()
        audio.preload = 'auto'
        audio.src = blobUrl
        
        // Ë®≠ÂÆö‰∫ã‰ª∂Áõ£ËÅΩÂô®
        // audio.onloadstart = () => console.log('üéµ Èü≥Ë®äÈñãÂßãËºâÂÖ•')
        // audio.oncanplay = () => console.log('üéµ Èü≥Ë®äÂèØ‰ª•Êí≠Êîæ')
        audio.onplay = () => {
          // console.log('üéµ Èü≥Ë®äÈñãÂßãÊí≠Êîæ')
          setIsPlaying(true)
        }
        audio.onended = () => {
          // console.log('üéµ Èü≥Ë®äÊí≠ÊîæÁµêÊùü')
          setIsPlaying(false)
          setAudioProgress(null)
          URL.revokeObjectURL(blobUrl)
        }
        audio.onerror = () => {
          // console.error('üéµ Èü≥Ë®äÊí≠ÊîæÈåØË™§:', e)
          // console.error('üéµ Audio element error details:', {
          //   code: e.target?.error?.code,
          //   message: e.target?.error?.message,
          //   networkState: e.target?.networkState,
          //   readyState: e.target?.readyState,
          //   src: e.target?.src
          // })
          setIsPlaying(false)
          setAudioProgress(null)
          URL.revokeObjectURL(blobUrl)
        }
        
        // Á≠âÂæÖÈü≥Ë®äËºâÂÖ•ÂÆåÊàêÂæåÂÜçÊí≠Êîæ
        return new Promise((resolve, reject) => {
          audio.oncanplaythrough = async () => {
            try {
              // console.log('üéµ Èü≥Ë®äÂÆåÂÖ®ËºâÂÖ•ÔºåÈñãÂßãÊí≠Êîæ')
              await audio.play()
              // console.log('üéµ Êí≠ÊîæÂëΩ‰ª§Âü∑Ë°åÊàêÂäü')
              resolve(audio)
            } catch (playError) {
              // console.error('üéµ Êí≠ÊîæÈåØË™§:', playError)
              reject(playError)
            }
          }
          
          audio.onerror = () => {
            // console.error('üéµ Èü≥Ë®äËºâÂÖ•Â§±ÊïóÂú® Promise ÂÖß')
            reject(new Error('Èü≥Ë®äËºâÂÖ•Â§±Êïó'))
          }
          
          // ÈñãÂßãËºâÂÖ•Èü≥Ë®ä
          // console.log('üéµ ÈñãÂßãËºâÂÖ•Èü≥Ë®äÊ™îÊ°à...')
          audio.load()
        })
      }

      // ÂÖàÂòóË©¶Áõ¥Êé•Âæû R2 Áç≤ÂèñÔºàÂ¶ÇÊûúÊúâÈÖçÁΩÆ R2 ÂÖ¨Èñã URLÔºâ
      const r2PublicUrl = process.env.NEXT_PUBLIC_CLOUDFLARE_R2_PUBLIC_URL
      // console.log('üîç R2 Public URL:', r2PublicUrl)
      // console.log('üìù Current text:', text)
      // console.log('üìù Text hash:', textHash)
      // console.log('üåç Current NODE_ENV:', process.env.NODE_ENV)
      // console.log('üåç Current location:', window.location.href)
      if (r2PublicUrl) {
        try {
          const r2AudioUrl = `${r2PublicUrl}/${textHash}.mp3`
          // console.log('üî• ÂòóË©¶Áõ¥Êé•Âæû R2 Áç≤Âèñ:', r2AudioUrl)
          
          const r2Controller = new AbortController()
          const r2TimeoutId = setTimeout(() => r2Controller.abort(), 15000) // 15 ÁßíË∂ÖÊôÇ
          
          // ÂñÆÊ¨°ÂòóË©¶ R2 Ë´ãÊ±ÇÔºå‰∏çÈáçË©¶
          const r2Response = await fetch(r2AudioUrl, {
            method: 'GET',
            mode: 'cors',
            cache: 'default',
            credentials: 'omit',
            signal: r2Controller.signal
          })
          
          clearTimeout(r2TimeoutId)
          
          if (r2Response.ok) {
            // console.log('‚úÖ R2 Áõ¥Êé•ÂëΩ‰∏≠! ÁãÄÊÖã:', r2Response.status)
            
            // Ê™¢Êü•ÂõûÊáâÂÖßÂÆπ
            const contentLength = r2Response.headers.get('content-length')
            // console.log('üì¶ R2 ÂÖßÂÆπÈï∑Â∫¶:', contentLength)
            
            try {
              // Ê™¢Êü•ÊòØÂê¶ËÉΩÊ≠£Á¢∫ËÆÄÂèñÂÖßÂÆπ
              // console.log('üìÑ ÈñãÂßãËÆÄÂèñ R2 blob...')
              const blob = await r2Response.blob()
              // console.log('üìÑ ÂØ¶Èöõ Blob Â§ßÂ∞è:', blob.size, 'È°ûÂûã:', blob.type)
              
              if (blob.size === 0) {
                throw new Error('R2 ÂõûÊáâÂÖßÂÆπÁÇ∫Á©∫')
              }
              
              // ÈáçÊñ∞ÂâµÂª∫ Response Â∞çË±°Áµ¶ playAudio ‰ΩøÁî®
              // console.log('üîß ÂâµÂª∫ Response Â∞çË±°...')
              const audioResponse = new Response(blob, {
                status: r2Response.status,
                statusText: r2Response.statusText,
                headers: r2Response.headers
              })
              
              // console.log('üéµ ÈñãÂßãÊí≠Êîæ R2 Èü≥Ë®ä...')
              await playAudio(audioResponse)
              // console.log('üéµ R2 Èü≥Ë®äÊí≠ÊîæÊàêÂäüÔºåÁµêÊùüÂáΩÊï∏')
              return // ÊàêÂäüÊí≠ÊîæÔºåÁµêÊùüÂáΩÊï∏
            } catch (playError) {
              // console.warn('üö® R2 Èü≥Ë®äÊí≠ÊîæÂ§±ÊïóÔºåÂõûÈÄÄÂà∞ API:', playError)
              // console.error('üö® ÂÆåÊï¥ÈåØË™§Â†ÜÁñä:', playError)
              // ÁπºÁ∫åÂü∑Ë°åÂõûÈÄÄÈÇèËºØ
            }
          } else {
            // console.log('‚ùå R2 ÂõûÊáâÂ§±Êïó:', r2Response.status, r2Response.statusText)
          }
        } catch (error) {
          console.error('üîÑ R2 Áõ¥Êé•Áç≤ÂèñÂ§±ÊïóÔºåÂõûÈÄÄÂà∞ API:', error)
          console.error('ÈåØË™§È°ûÂûã:', error instanceof Error ? error.name : typeof error)
          console.error('ÈåØË™§Ë®äÊÅØ:', error instanceof Error ? error.message : String(error))
          console.error('ÂÆåÊï¥ÈåØË™§Â∞çË±°:', error)
          if (error instanceof Error) {
            console.error('ÈåØË™§Â†ÜÁñä:', error.stack)
            if (error.name === 'AbortError') {
              console.error('R2 Ë´ãÊ±ÇË¢´Ë∂ÖÊôÇ‰∏≠Ê≠¢ (15Áßí)')
            } else if (error.name === 'TypeError') {
              console.error('ÂèØËÉΩÊòØ CORS ÊàñÁ∂≤Ë∑ØÈÄ£Êé•ÂïèÈ°å')
            }
          }
        }
      }

      // ÂõûÈÄÄÂà∞ API ÊñπÂºè
      // console.log('üîÑ ÈñãÂßã API ÂõûÈÄÄÈÇèËºØ')
      const controller = new AbortController()
      const timeoutId = setTimeout(() => controller.abort(), 35000) // 35 ÁßíË∂ÖÊôÇ
      
      try {
        // ÈÖçÁΩÆË´ãÊ±ÇÈÅ∏È†Ö
        const fetchOptions = {
          headers: {
            'Accept': 'audio/mpeg'
            // ÁßªÈô§ÂèØËÉΩËß∏ÁôºÈ†êÊ™¢ÁöÑÊ®ôÈ†≠
          },
          cache: 'force-cache' as RequestCache,
          signal: controller.signal,
          redirect: 'follow' as RequestRedirect,
          mode: 'cors' as RequestMode
        }

        const response = await fetch(apiUrl, fetchOptions)

        if (response.status === 304) {
          const cacheResponse = await caches.match(apiUrl)
          if (!cacheResponse) {
            const freshResponse = await fetch(apiUrl, {
              headers: { 'Accept': 'audio/mpeg' },
              signal: controller.signal,
              redirect: 'follow' as RequestRedirect,
              mode: 'cors' as RequestMode
            })
            if (!freshResponse.ok) {
              throw new Error(`TTS request failed: ${freshResponse.status} ${freshResponse.statusText}`)
            }
            
            const cache = await caches.open('tts-cache')
            await cache.put(apiUrl, freshResponse.clone())
            
            return await playAudio(freshResponse)
          }
          return await playAudio(cacheResponse)
        }

        if (!response.ok) {
          throw new Error(`TTS request failed: ${response.status} ${response.statusText}`)
        }
        
        // Âè™ÊúâÁï∂ÈüøÊáâÊòØ‰æÜËá™ÊàëÂÄëÁöÑ API ÊôÇÊâçÂø´Âèñ
        if (response.url.includes('/api/tts/')) {
          const cache = await caches.open('tts-cache')
          await cache.put(apiUrl, response.clone())
        }
        
        return await playAudio(response)
      } finally {
        clearTimeout(timeoutId)
      }
    } catch (error) {
      // const { publicRuntimeConfig } = getConfig()
      // const basePath = publicRuntimeConfig?.root || ''
      // const protocol = window.location.protocol
      // const host = window.location.host
      // const encodedText = encodeURIComponent(text)
      // const errorApiUrl = `${protocol}//${host}${basePath}/api/tts/${encodedText}/`
      
      // console.error('TTS error details:', {
      //   error,
      //   text,
      //   apiUrl: errorApiUrl,
      //   userAgent: navigator.userAgent,
      //   timestamp: new Date().toISOString()
      // })
      
      // Ê™¢Êü•ÊòØÂê¶ÊòØÁ∂≤Ë∑ØÈåØË™§
      // if (error instanceof TypeError && error.message.includes('Failed to fetch')) {
      //   console.error('Network error - possibly CORS or connectivity issue')
      // }
      
      setIsPlaying(false)
      setAudioProgress(null)
    } finally {
      setIsTTSLoading(false)
    }
  }

  // Êí≠ÊîæÈ†ê‰∏ãËºâÁöÑÊï∏ÈáèÈü≥Ê™î
  const playPreloadedQuantityAudio = async (quantity: number): Promise<void> => {
    return new Promise((resolve, reject) => {
      const audioUrl = preloadedQuantityAudios[quantity]
      if (!audioUrl) {
        reject(new Error(`È†ê‰∏ãËºâÈü≥Ê™î‰∏çÂ≠òÂú®: ${quantity}`))
        return
      }
      
      const audio = new Audio(audioUrl)
      audio.onended = () => resolve()
      audio.onerror = () => reject(new Error(`Êí≠ÊîæÈ†ê‰∏ãËºâÈü≥Ê™îÂ§±Êïó: ${quantity}`))
      audio.play().catch(reject)
    })
  }

  // ÂàÜÈõ¢Êí≠ÊîæÔºöÂÖàÊí≠ÊîæËèúËâ≤ÂêçÁ®±ÔºåÁÑ∂ÂæåÊí≠ÊîæÊï∏Èáè
  const playItemWithQuantity = async (itemName: string, quantity: number) => {
    try {
      // Â¶ÇÊûúÊ≠£Âú®Êí≠ÊîæÔºåÂÖàÂÅúÊ≠¢
      if (isPlaying || isQuantityTTSLoading) {
        setIsPlaying(false)
        setIsQuantityTTSLoading(false)
        if (audioPlayer) {
          audioPlayer.stop()
          setAudioPlayer(null)
        }
        return
      }

      setIsQuantityTTSLoading(true)
      
      // 1. Êí≠ÊîæËèúËâ≤ÂêçÁ®±
      console.log('üéµ ÈñãÂßãÊí≠ÊîæËèúËâ≤ÂêçÁ®±:', itemName)
      await playTTS(itemName)
      
      // 2. Á∏ÆÁü≠Á≠âÂæÖÊôÇÈñìÔºàÂæû2.5ÁßíÁ∏ÆÁü≠Âà∞1ÁßíÔºâ
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      // 3. Áü≠Êö´ÂÅúÈ†ì
      await new Promise(resolve => setTimeout(resolve, 200))
      
      // 4. Êí≠ÊîæÊï∏ÈáèÔºàÂÑ™ÂÖà‰ΩøÁî®È†ê‰∏ãËºâÁöÑÈü≥Ê™îÔºâ
      const quantityText = japaneseNumbers[quantity]
      if (quantityText) {
        console.log('üéµ ÈñãÂßãÊí≠ÊîæÊï∏Èáè:', quantityText)
        
        if (preloadedQuantityAudios[quantity]) {
          // ‰ΩøÁî®È†ê‰∏ãËºâÁöÑÈü≥Ê™îÔºåÈÄüÂ∫¶Êõ¥Âø´
          console.log('üéµ ‰ΩøÁî®È†ê‰∏ãËºâÈü≥Ê™î:', quantity)
          await playPreloadedQuantityAudio(quantity)
        } else {
          // ÂõûÈÄÄÂà∞TTS API
          console.log('üéµ ‰ΩøÁî®TTS API:', quantityText)
          await playTTS(quantityText)
        }
      }
      
    } catch (error) {
      console.error('ÈÄ£Á∫åÊí≠ÊîæÈåØË™§:', error)
    } finally {
      setIsQuantityTTSLoading(false)
    }
  }

  if (isMenuLoading) {
    return <div className="container mx-auto p-8 text-center">ËºâÂÖ•‰∏≠...</div>
  }

  if (!menuData) {
    return <div className="container mx-auto p-8 text-center">Ê≤íÊúâËèúÂñÆË≥áÊñô</div>
  }


  const formatPOSPrice = (price: number | { normal?: number; half?: number } | string) => {
    if (typeof price === 'object') {
      return price.normal ? `¬•${price.normal.toLocaleString()}` : '¬•0'
    }
    if (typeof price === 'string') {
      // Â¶ÇÊûúÊòØÂ≠ó‰∏≤ÔºåÂòóË©¶Ëß£ÊûêÊàñËøîÂõûÂéüÂÄº
      const numPrice = parseFloat(price)
      return isNaN(numPrice) ? price : `¬•${numPrice.toLocaleString()}`
    }
    return `¬•${price.toLocaleString()}`
  }

  const renderPOSContent = () => {
    const cartItemCount = items.reduce((total, item) => total + item.quantity, 0)
    const currentCategoryItems = menuData?.[selectedCategory]

    return (
      <div className="min-h-screen bg-gray-100 flex">
        {/* Â∑¶ÂÅ¥È°ûÂà•Â∞éËà™ */}
        <div className="w-48 bg-white shadow-lg fixed left-0 top-[72px] bottom-0 overflow-y-auto z-40 border-t border-gray-200">
          <nav className="py-2">
            {Object.entries(menuData || {}).map(([categoryId, categoryData]) => {
              const colors = getCategoryColor(categoryId)
              return (
                <button
                  key={categoryId}
                  onClick={() => setSelectedCategory(categoryId)}
                  className={`w-full px-4 py-3 text-left transition-colors ${
                    selectedCategory === categoryId
                      ? `${colors.bg} ${colors.text} border-l-4 ${colors.border}`
                      : 'hover:bg-gray-100 text-gray-900'
                  }`}
                >
                  <div className="font-medium">{categoryData.name[language]}</div>
                  <div className={`text-sm ${selectedCategory === categoryId ? colors.text : 'text-gray-500'}`}>
                    {categoryData.items.length} ÂìÅÈ†Ö
                  </div>
                </button>
              )
            })}
          </nav>
        </div>

        {/* Âè≥ÂÅ¥ÂïÜÂìÅÁ∂≤Ê†º */}
        <div className="ml-48 flex-1 p-6">
          {/* È†ÇÈÉ®Â∑•ÂÖ∑Âàó */}
          <div className="space-y-4 mb-6">
            {/* Ê°åËôüÈ°ØÁ§∫ */}
            <div className="bg-white rounded-lg shadow p-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <div className="bg-red-50 px-4 py-2 rounded-lg border border-red-200">
                    <span className="text-sm text-gray-700">
                      {language === 'ja' ? '„ÉÜ„Éº„Éñ„É´' : language === 'zh-tw' ? 'Ê°åËôü' : language === 'zh-cn' ? 'Ê°åÂè∑' : 'Table'}
                    </span>
                    <span className="ml-2 font-bold text-xl text-red-600">{tableNumber}</span>
                  </div>
                  
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setShowTableSelectorDialog(true)}
                    className="border border-gray-300 hover:border-gray-400 hover:bg-gray-50 text-gray-700 hover:text-gray-900 font-medium transition-all"
                  >
                    {language === 'ja' ? 'Â§âÊõ¥' : language === 'zh-tw' ? 'ËÆäÊõ¥' : language === 'zh-cn' ? 'ÂèòÊõ¥' : 'Change'}
                  </Button>
                </div>
                
                {/* Ë≥ºÁâ©ËªäÊåâÈàï */}
                <Button
                  onClick={() => toggleCart('menu')}
                  className="relative bg-red-600 hover:bg-red-700 text-white"
                >
                  <ShoppingCart className="h-5 w-5 mr-2" />
                  {t('cart', language)}
                  {cartItemCount > 0 && (
                    <span className="absolute -top-2 -right-2 bg-yellow-500 text-white rounded-full h-6 w-6 flex items-center justify-center text-sm font-bold">
                      {cartItemCount}
                    </span>
                  )}
                </Button>
              </div>
            </div>
            
          </div>

          {/* ÂïÜÂìÅÁ∂≤Ê†º */}
          <div className="grid grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6 gap-3">
            {currentCategoryItems?.items.map((item, index) => {
              const cartQuantity = getItemInCart(item)
              const colors = getCategoryColor(selectedCategory)
              return (
                <button
                  key={index}
                  onClick={() => handleItemClick(item, currentCategoryItems.name)}
                  className={`bg-white rounded-lg shadow hover:shadow-md transition-all duration-200 p-3 text-left group relative border border-gray-200 border-l-4 ${colors.border} ${colors.hover} ${colors.light}`}
                >
                  {cartQuantity > 0 && (
                    <span className={`absolute -top-2 -right-2 text-white rounded-full h-6 w-6 flex items-center justify-center text-sm font-bold z-10 shadow-md ${colors.border.replace('border-', 'bg-')}`}>
                      {cartQuantity}
                    </span>
                  )}
                  
                  {/* Á∞°ÊΩîÁöÑËèúÂìÅÂÖßÂÆπ */}
                  <div className="space-y-2">
                    <h3 className={`font-bold text-lg leading-tight text-gray-800 group-hover:${colors.text} transition-colors duration-200 min-h-[2.5rem] flex items-center`}>
                      {item.name[language]}
                    </h3>
                    <div className="flex items-center justify-between">
                      <p className={`text-xl font-bold ${colors.text}`}>
                        {formatPOSPrice(item.price)}
                      </p>
                      <div className={`text-gray-400 group-hover:${colors.text} transition-colors`}>
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                        </svg>
                      </div>
                    </div>
                  </div>
                </button>
              )
            })}
          </div>
        </div>
      </div>
    )
  }

  const renderMenuContent = (lang: Language) => (
    <div className={`w-full ${getFontClass(lang)}`}>
      <div className="container mx-auto px-4 py-8">
        <div className="grid gap-6">
          {Object.entries(menuData).map(([category, categoryData]) => (
            <Card key={category}>
              <CardHeader>
                <CardTitle className={`text-2xl ${getTitleFontClass(lang)}`}>
                  {categoryData?.name?.[lang] || category}
                </CardTitle>
              </CardHeader>
              <div className="p-6 pt-0">
                <div className="space-y-2">
                  {categoryData?.items?.map((item, index) => {
                    const cartQuantity = getItemInCart(item)
                    const isInCart = cartQuantity > 0
                    
                    return (
                      <div 
                        key={index} 
                        className={`flex justify-between border-b pb-2 p-2 cursor-pointer rounded transition-all duration-200 ${
                          isInCart 
                            ? 'bg-gray-100 border-gray-300 hover:bg-gray-150 shadow-sm' 
                            : 'hover:bg-gray-50'
                        }`}
                        onClick={() => handleItemClick(item, categoryData.name)}
                      >
                        <div className="flex items-center relative">
                          <span className={`text-2xl ${isInCart ? 'text-gray-800 font-medium' : ''}`}>
                            {item?.name?.[lang] || 'Êú™Áü•È†ÖÁõÆ'}
                          </span>
                          {isInCart && (
                            <span className="absolute -top-1 -right-5 bg-red-600 text-white text-xs font-bold px-1.5 py-0.5 rounded-full min-w-[18px] h-[18px] flex items-center justify-center">
                              {cartQuantity}
                            </span>
                          )}
                        </div>
                        <div className="flex items-center gap-2">
                          <span className={`font-semibold text-xl ${isInCart ? 'text-gray-700' : ''}`}>
                            {formatPrice(item.price)}
                          </span>
                          <span className={`flex items-center ${isInCart ? 'text-gray-500' : 'text-gray-300'}`}>‚ùØ</span>
                        </div>
                      </div>
                    )
                  })}
                </div>
              </div>
            </Card>
          ))}
        </div>
      </div>
    </div>
  )

  if (mode === 'pos') {
    if (showTableSelector && !tableNumber) {
      return (
        <TableSelector 
          onTableSelected={(table) => {
            setShowTableSelector(false)
          }}
        />
      )
    }
    
    return (
      <>
        <div className="relative min-h-screen">
          {renderPOSContent()}
        </div>
        
        {/* Ê°åËôüÈÅ∏ÊìáÂ∞çË©±Ê°Ü */}
        <TableSelectorDialog
          isOpen={showTableSelectorDialog}
          onClose={() => setShowTableSelectorDialog(false)}
        />
        
        {/* ÂïÜÂìÅË©≥ÊÉÖÂ∞çË©±Ê°Ü - ËàáÊ≠£Â∏∏Ê®°ÂºèÂÆåÂÖ®‰∏ÄËá¥ */}
        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
          <DialogContent 
            className="dialog-content bg-white rounded-lg max-w-[95%] md:max-w-lg focus:outline-none focus:ring-0"
            onTouchStart={(e) => setTouchStart(e.touches[0].clientX)}
            onTouchEnd={handleDialogTouchEnd}
          >
            <FontWrapper>
              <DialogHeader>
                <DialogTitle>
                  <div className="bg-gray-100 p-3 rounded-lg mt-8">
                    <div className={`text-center text-sm text-gray-600 mb-2 ${getTitleFontClass('ja')}`}>
                      {selectedItem?.categoryName?.['ja']}
                    </div>
                    <div className="text-3xl text-red-900 font-bold text-center">
                      {selectedItem?.name?.ja?.split(/[()Ôºà]/)[0]}
                    </div>
                    <div className="text-lg text-red-900 font-bold text-center">
                      {selectedItem?.name?.ja?.match(/[()Ôºà].*$/)?.[0]}
                    </div>
                  </div>
                </DialogTitle>
                <DialogDescription className="sr-only">ÂïÜÂìÅË©≥Á¥∞Ë≥áË®ä</DialogDescription>
              </DialogHeader>
              {selectedItem && (
                <div className="space-y-2 px-0 pb-2">
                  {/* Êï∏ÈáèÈÅ∏ÊìáÂçÄÂüü */}
                  <div className="bg-gray-50 p-3 rounded-lg">
                    <div className="text-center mb-2">
                      <span className="text-gray-600 font-medium">{t('selectQuantity', language)}</span>
                    </div>
                    <div className="flex items-center justify-center gap-4">
                      <Button
                        variant="outline"
                        size="icon"
                        className={`h-12 w-12 rounded-full border-2 shadow-md transition-all duration-200
                          ${quantity <= 1 
                            ? 'border-gray-300 text-gray-400 bg-gray-100 cursor-not-allowed' 
                            : 'border-gray-400 text-gray-700 bg-white hover:bg-gray-50 hover:border-gray-500 hover:shadow-lg active:scale-95'
                          }`}
                        disabled={quantity <= 1}
                        onClick={() => {
                          const newQuantity = Math.max(1, quantity - 1)
                          if (newQuantity === 1 && quantity === 2) {
                            // Âæû 2 ËÆäÊàê 1 (ÊúÄ‰ΩéÂÄº)ÔºåÊí≠ÊîæÈÇäÁïåÈü≥Êïà
                            playButtonSound('boundary')
                          } else {
                            // ÊôÆÈÄö - Èü≥Êïà
                            playButtonSound('minus')
                          }
                          setQuantity(newQuantity)
                        }}
                      >
                        <Minus className="h-6 w-6 stroke-2" />
                      </Button>
                      
                      <div className="bg-white border-2 border-gray-300 rounded-lg px-6 py-3 min-w-[4rem] text-center shadow-md">
                        <span className="text-2xl font-bold text-gray-800">{quantity}</span>
                      </div>
                      
                      <Button
                        variant="outline"
                        size="icon"
                        className={`h-12 w-12 rounded-full border-2 shadow-md transition-all duration-200
                          ${quantity >= 9 
                            ? 'border-gray-300 text-gray-400 bg-gray-100 cursor-not-allowed' 
                            : 'border-gray-400 text-gray-700 bg-white hover:bg-gray-50 hover:border-gray-500 hover:shadow-lg active:scale-95'
                          }`}
                        disabled={quantity >= 9}
                        onClick={() => {
                          const newQuantity = Math.min(9, quantity + 1)
                          if (newQuantity === 9 && quantity === 8) {
                            // Âæû 8 ËÆäÊàê 9 (ÊúÄÈ´òÂÄº)ÔºåÊí≠ÊîæÈÇäÁïåÈü≥Êïà
                            playButtonSound('boundary')
                          } else {
                            // ÊôÆÈÄö + Èü≥Êïà
                            playButtonSound('plus')
                          }
                          setQuantity(newQuantity)
                        }}
                      >
                        <Plus className="h-6 w-6 stroke-2" />
                      </Button>
                    </div>
                  </div>
                  
                  {/* ÂÉπÊ†ºÈ°ØÁ§∫ */}
                  <div className="py-2">
                    <div className="flex justify-center items-center gap-4">
                      <div className="font-semibold text-gray-600">‰æ°Ê†º</div>
                      <div className="text-2xl text-gray-900">{formatPrice(selectedItem.price)}</div>
                    </div>
                  </div>
                  
                  {/* ‰∏ãËºâÈÄ≤Â∫¶Ê¢ù */}
                  {audioProgress && audioProgress.total > 0 && (
                    <div className="flex justify-center">
                      <div className="w-32 flex flex-col items-center gap-1">
                        <Progress 
                          value={(audioProgress.loaded / audioProgress.total) * 100} 
                          className="h-2 w-full"
                        />
                        <span className="text-xs text-gray-500">
                          {Math.round((audioProgress.loaded / audioProgress.total) * 100)}%
                        </span>
                      </div>
                    </div>
                  )}
                  
                  {/* Ë≥ºÁâ©ËªäÊåâÈàïÂçÄÂüü */}
                  <div className="pt-3 mt-3 border-t flex justify-between items-center">
                    <Button
                      variant="default"
                      size="lg"
                      className="flex-1 mr-2 bg-red-600 hover:bg-red-700 text-white"
                      onClick={() => {
                        const price = typeof selectedItem.price === 'object' 
                          ? selectedItem.price.normal || 0 
                          : typeof selectedItem.price === 'number' 
                          ? selectedItem.price 
                          : 0
                        
                        addItem({
                          name: selectedItem.name,
                          price: price,
                          quantity: quantity
                        })
                        
                        setIsDialogOpen(false)
                        // POSÊ®°Âºè‰∏çÈ°ØÁ§∫alertÔºåÁõ¥Êé•ÈóúÈñâÂ∞çË©±Ê°Ü
                      }}
                    >
                      <ShoppingCart className="mr-2 h-5 w-5" />
                      {t('addToCart', language)}
                    </Button>
                    
                    <Button
                      variant="default"
                      size="lg"
                      className="relative bg-red-600 hover:bg-red-700 text-white h-12 w-12 p-0 rounded-full shadow-md"
                      onClick={() => {
                        toggleCart('dialog')
                      }}
                    >
                      <ShoppingCart className="h-5 w-5 text-white" />
                      {getItemCount() > 0 && (
                        <span className="absolute -top-2 -right-2 bg-yellow-400 text-gray-900 text-xs font-bold rounded-full h-5 w-5 flex items-center justify-center">
                          {getItemCount()}
                        </span>
                      )}
                    </Button>
                  </div>
                </div>
              )}
            </FontWrapper>
          </DialogContent>
        </Dialog>
      </>
    )
  }

  return (
    <div className="relative min-h-screen">
      {/* Âõ∫ÂÆöÂú®Âè≥‰∏ãËßíÁöÑË≥ºÁâ©ËªäÊåâÈàï */}
      <Button
        variant="default"
        size="lg"
        className="fixed bottom-6 right-6 z-50 rounded-full h-14 w-14 p-0 bg-red-600 hover:bg-red-700 shadow-lg"
        onClick={() => toggleCart('menu')}
      >
        <div className="relative">
          <ShoppingCart className="h-6 w-6 text-white" />
          {getItemCount() > 0 && (
            <span className="absolute -top-2 -right-2 bg-yellow-400 text-gray-900 text-xs font-bold rounded-full h-5 w-5 flex items-center justify-center">
              {getItemCount()}
            </span>
          )}
        </div>
      </Button>
      
      <div 
        className="relative overflow-auto"
        style={{ minHeight: 'calc(100vh - 72px)', WebkitOverflowScrolling: 'touch', overflowY: 'auto' }}
        onTouchStart={(e) => setTouchStart(e.touches[0].clientX)}
        onTouchEnd={handleMainTouchEnd}
      >
        <div className="relative w-full h-full">
          {nextLanguage && (
            <div className={`absolute inset-0 w-full slide-${slideDirection}-in`}>
              {renderMenuContent(nextLanguage)}
            </div>
          )}
          <div className={`${slideDirection ? `absolute inset-0 w-full slide-${slideDirection}-out` : ''}`}>
            {renderMenuContent(language)}
          </div>
        </div>
      </div>

      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent 
          className="dialog-content bg-white rounded-lg max-w-[95%] md:max-w-lg focus:outline-none focus:ring-0"
          onTouchStart={(e) => setTouchStart(e.touches[0].clientX)}
          onTouchEnd={handleDialogTouchEnd}
        >
          <FontWrapper>
            <DialogHeader>
              <DialogTitle>
                <div className="bg-gray-100 p-3 rounded-lg mt-8">
                  <div className={`text-center text-sm text-gray-600 mb-2 ${getTitleFontClass('ja')}`}>
                    {selectedItem?.categoryName?.['ja']}
                  </div>
                  <div className="text-3xl text-red-900 font-bold text-center">
                    {selectedItem?.name?.ja?.split(/[()Ôºà]/)[0]}
                  </div>
                  <div className="text-lg text-red-900 font-bold text-center">
                    {selectedItem?.name?.ja?.match(/[()Ôºà].*$/)?.[0]}
                  </div>
                  <div className="flex flex-col items-center gap-4">
                    {/* ÂéüÊúâÁöÑË™ûÈü≥Êí≠ÊîæÊåâÈàï */}
                    <Button
                      variant="ghost"
                      size="icon"
                      disabled={isTTSLoading || isPlaying || isQuantityTTSLoading}
                      className={`h-8 w-8 pt-2 inline-flex items-center justify-center hover:bg-gray-200 relative
                        focus-visible:ring-0 focus-visible:ring-offset-0
                        ${isTTSLoading ? 'animate-pulse' : ''}
                        ${isPlaying ? 'text-blue-600' : 'text-gray-600'}
                      `}
                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {
                        e.stopPropagation()
                        if (selectedItem?.name?.['ja']) {
                          playTTS(selectedItem.name['ja'])
                        }
                      }}
                    >
                      {isTTSLoading ? (
                        <div className="h-5 w-5 border-2 border-gray-600 border-t-transparent rounded-full animate-spin" />
                      ) : (
                        <>
                          <Volume2 className="h-5 w-5 fill-current" />
                          {isPlaying && (
                            <div className="absolute -right-[6px] flex items-center gap-[2px]">
                              <div className="w-[2px] h-[8px] bg-blue-600 animate-sound-wave-1" />
                              <div className="w-[2px] h-[12px] bg-blue-600 animate-sound-wave-2" />
                              <div className="w-[2px] h-[16px] bg-blue-600 animate-sound-wave-3" />
                            </div>
                          )}
                        </>
                      )}
                    </Button>
                  </div>
                </div>
              </DialogTitle>
              <DialogDescription className="sr-only">ÂïÜÂìÅË©≥Á¥∞Ë≥áË®ä</DialogDescription>
            </DialogHeader>
            {selectedItem && (
              <div className="space-y-2 px-0 pb-2">
                {/* Êï∏ÈáèÈÅ∏ÊìáÂçÄÂüü */}
                <div className="bg-gray-50 p-3 rounded-lg">
                  <div className="text-center mb-2">
                    <span className="text-gray-600 font-medium">{t('selectQuantity', language)}</span>
                  </div>
                  <div className="flex items-center justify-center gap-4">
                    <Button
                      variant="outline"
                      size="icon"
                      className={`h-12 w-12 rounded-full border-2 shadow-md transition-all duration-200
                        ${quantity <= 1 
                          ? 'border-gray-300 text-gray-400 bg-gray-100 cursor-not-allowed' 
                          : 'border-gray-400 text-gray-700 bg-white hover:bg-gray-50 hover:border-gray-500 hover:shadow-lg active:scale-95'
                        }`}
                      disabled={quantity <= 1}
                      onClick={() => {
                        const newQuantity = Math.max(1, quantity - 1)
                        if (newQuantity === 1 && quantity === 2) {
                          // Âæû 2 ËÆäÊàê 1 (ÊúÄ‰ΩéÂÄº)ÔºåÊí≠ÊîæÈÇäÁïåÈü≥Êïà
                          playButtonSound('boundary')
                        } else {
                          // ÊôÆÈÄö - Èü≥Êïà
                          playButtonSound('minus')
                        }
                        setQuantity(newQuantity)
                      }}
                    >
                      <Minus className="h-6 w-6 stroke-2" />
                    </Button>
                    
                    <div className="bg-white border-2 border-gray-300 rounded-lg px-6 py-3 min-w-[4rem] text-center shadow-md">
                      <span className="text-2xl font-bold text-gray-800">{quantity}</span>
                    </div>
                    
                    <Button
                      variant="outline"
                      size="icon"
                      className={`h-12 w-12 rounded-full border-2 shadow-md transition-all duration-200
                        ${quantity >= 9 
                          ? 'border-gray-300 text-gray-400 bg-gray-100 cursor-not-allowed' 
                          : 'border-gray-400 text-gray-700 bg-white hover:bg-gray-50 hover:border-gray-500 hover:shadow-lg active:scale-95'
                        }`}
                      disabled={quantity >= 9}
                      onClick={() => {
                        const newQuantity = Math.min(9, quantity + 1)
                        if (newQuantity === 9 && quantity === 8) {
                          // Âæû 8 ËÆäÊàê 9 (ÊúÄÈ´òÂÄº)ÔºåÊí≠ÊîæÈÇäÁïåÈü≥Êïà
                          playButtonSound('boundary')
                        } else {
                          // ÊôÆÈÄö + Èü≥Êïà
                          playButtonSound('plus')
                        }
                        setQuantity(newQuantity)
                      }}
                    >
                      <Plus className="h-6 w-6 stroke-2" />
                    </Button>
                  </div>
                  
                  {/* ÈÄ£Á∫åË™ûÈü≥Êí≠ÊîæÊåâÈàï */}
                  <div className="mt-4 flex justify-center">
                    <Button
                      variant="default"
                      className={`px-6 py-3 text-base bg-red-900 hover:bg-red-800 text-white rounded-lg
                        focus-visible:ring-0 focus-visible:ring-offset-0
                        ${isQuantityTTSLoading ? 'animate-pulse' : ''}
                        disabled:opacity-50
                      `}
                      disabled={isTTSLoading || isPlaying || isQuantityTTSLoading}
                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {
                        e.stopPropagation()
                        if (selectedItem?.name?.['ja']) {
                          playItemWithQuantity(selectedItem.name['ja'], quantity)
                        }
                      }}
                    >
                      {isQuantityTTSLoading ? (
                        <div className="flex items-center gap-2">
                          <div className="h-5 w-5 border-2 border-white border-t-transparent rounded-full animate-spin" />
                          <span>Êí≠Êîæ‰∏≠...</span>
                        </div>
                      ) : (
                        <div className="flex items-center gap-2">
                          <Volume2 className="h-5 w-5" />
                          <span>Êí≠Êîæ {japaneseNumbers[quantity]}</span>
                        </div>
                      )}
                    </Button>
                  </div>
                </div>
                
                {/* ÂÉπÊ†ºÈ°ØÁ§∫ */}
                <div className="py-2">
                  <div className="flex justify-center items-center gap-4">
                    <div className="font-semibold text-gray-600">‰æ°Ê†º</div>
                    <div className="text-2xl text-gray-900">{formatPrice(selectedItem.price)}</div>
                  </div>
                </div>
                
                {/* ‰∏ãËºâÈÄ≤Â∫¶Ê¢ù */}
                {audioProgress && audioProgress.total > 0 && (
                  <div className="flex justify-center">
                    <div className="w-32 flex flex-col items-center gap-1">
                      <Progress 
                        value={(audioProgress.loaded / audioProgress.total) * 100} 
                        className="h-2 w-full"
                      />
                      <span className="text-xs text-gray-500">
                        {Math.round((audioProgress.loaded / audioProgress.total) * 100)}%
                      </span>
                    </div>
                  </div>
                )}
                <div className="pt-2 border-t">
                  <div className="font-semibold text-gray-600 mb-2">„Åù„ÅÆ‰ªñ„ÅÆË®ÄË™û</div>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                    <div className="bg-gray-50 p-3 rounded-lg">
                      <span className="block text-xs text-gray-500 mb-1">Âè∞ÊπæË™û</span>
                      <div className="text-gray-900 text-lg">{selectedItem.name['zh-tw']}</div>
                    </div>
                    <div className="bg-gray-50 p-3 rounded-lg">
                      <span className="block text-xs text-gray-500 mb-1">‰∏≠ÂõΩË™û</span>
                      <div className="text-gray-900 text-lg">{selectedItem.name['zh-cn']}</div>
                    </div>
                    <div className="bg-gray-50 p-3 rounded-lg md:col-span-2">
                      <span className="block text-xs text-gray-500 mb-1">English</span>
                      <div className="text-gray-900 text-lg">{selectedItem.name.en}</div>
                    </div>
                  </div>
                </div>
                
                {/* Ë≥ºÁâ©ËªäÊåâÈàïÂçÄÂüü */}
                <div className="pt-3 mt-3 border-t flex justify-between items-center">
                  <Button
                    variant="default"
                    size="lg"
                    className="flex-1 mr-2 bg-red-600 hover:bg-red-700 text-white"
                    onClick={() => {
                      const price = typeof selectedItem.price === 'object' 
                        ? selectedItem.price.normal || 0 
                        : typeof selectedItem.price === 'number' 
                        ? selectedItem.price 
                        : 0
                      
                      addItem({
                        name: selectedItem.name,
                        price: price,
                        quantity: quantity
                      })
                      
                      setIsDialogOpen(false)
                      setTimeout(() => {
                        alert(`${t('addedToCart', language)}Ôºö${selectedItem.name[language]} x ${quantity}`)
                      }, 100)
                    }}
                  >
                    <ShoppingCart className="mr-2 h-5 w-5" />
                    {t('addToCart', language)}
                  </Button>
                  
                  <Button
                    variant="default"
                    size="lg"
                    className="relative bg-red-600 hover:bg-red-700 text-white h-12 w-12 p-0 rounded-full shadow-md"
                    onClick={() => {
                      toggleCart('dialog')
                    }}
                  >
                    <ShoppingCart className="h-5 w-5 text-white" />
                    {getItemCount() > 0 && (
                      <span className="absolute -top-2 -right-2 bg-yellow-400 text-gray-900 text-xs font-bold rounded-full h-5 w-5 flex items-center justify-center">
                        {getItemCount()}
                      </span>
                    )}
                  </Button>
                </div>
              </div>
            )}
          </FontWrapper>
        </DialogContent>
      </Dialog>
    </div>
  )
} 